{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Typewriter.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { onMount, createEventDispatcher, onDestroy } from 'svelte'\n\texport let interval = 30\n\texport let cascade = false\n\texport let loop = false\n\texport let cursor = true\n\n\tlet node\n\tlet elements = []\n\n\tconst dispatch = createEventDispatcher()\n\n\tif (cascade && loop) throw new Error('`cascade` mode should not be used with `loop`!')\n\n\tconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\tconst rng = (min, max) => Math.floor(Math.random() * (max - min) + min)\n\tconst hasSingleTextNode = el => el.childNodes.length === 1 && el.childNodes[0].nodeType === 3\n\tconst typingInterval = async () =>\n\t\tArray.isArray(interval) ? await sleep(interval[rng(0, interval.length)]) : await sleep(interval)\n\n\tconst getElements = parentElement => {\n\t\tconst treeWalker = document.createTreeWalker(parentElement, NodeFilter.SHOW_ELEMENT)\n\t\tlet currentNode = treeWalker.nextNode()\n\t\twhile (currentNode) {\n\t\t\tconst text = currentNode.textContent.split('')\n\t\t\thasSingleTextNode(currentNode) && elements.push(!loop ? { currentNode, text } : text)\n\t\t\tcurrentNode = treeWalker.nextNode()\n\t\t}\n\t}\n\n\tconst typewriterEffect = async ({ currentNode, text }, { loopAnimation } = { loopAnimation: false }) => {\n\t\tcurrentNode.textContent = ''\n\t\tcurrentNode.classList.add('typing')\n\t\tfor (const letter of text) {\n\t\t\tcurrentNode.textContent += letter\n\t\t\tconst fullyWritten = loopAnimation && currentNode.textContent === text.join('')\n\t\t\tif (fullyWritten) {\n\t\t\t\ttypeof loop === 'number' ? await sleep(loop) : await sleep(1500)\n\t\t\t\twhile (currentNode.textContent !== '') {\n\t\t\t\t\tcurrentNode.textContent = currentNode.textContent.slice(0, -1)\n\t\t\t\t\tawait typingInterval()\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tawait typingInterval()\n\t\t}\n\t\tif (currentNode.nextSibling !== null || !cascade)\n\t\t\tcurrentNode.classList.length == 1\n\t\t\t\t? currentNode.removeAttribute('class')\n\t\t\t\t: currentNode.classList.remove('typing')\n\t}\n\n\tconst cascadeMode = async () => {\n\t\telements.forEach(({ currentNode }) => (currentNode.textContent = ''))\n\t\tfor (const element of elements) await typewriterEffect(element)\n\t\tdispatch('done')\n\t}\n\n\tconst loopMode = async () => {\n\t\tconst loopParagraphTag = node.firstChild.tagName.toLowerCase()\n\t\tconst loopParagraph = document.createElement(loopParagraphTag)\n\t\tnode.childNodes.forEach(el => el.remove())\n\t\tnode.appendChild(loopParagraph)\n\t\twhile (loop) {\n\t\t\tfor (const text of elements) {\n\t\t\t\tloopParagraph.textContent = text.join('')\n\t\t\t\tawait typewriterEffect({ currentNode: loopParagraph, text }, { loopAnimation: true })\n\t\t\t}\n\t\t\tdispatch('done')\n\t\t}\n\t}\n\n\tconst defaultMode = async () => {\n\t\tawait new Promise(resolve => {\n\t\t\telements.forEach(async (element, i) => {\n\t\t\t\tawait typewriterEffect(element)\n\t\t\t\ti + 1 === elements.length && resolve()\n\t\t\t})\n\t\t})\n\t\tdispatch('done')\n\t}\n\n\tonMount(async () => {\n\t\tif (hasSingleTextNode(node)) throw new Error('<Typewriter /> must have at least one element')\n\t\tgetElements(node)\n\t\tcascade ? cascadeMode() : loop ? loopMode() : defaultMode()\n\t})\n\n\tonDestroy(() => loop = false)\n</script>\n\n<style>\n\t@keyframes cursorFade {\n\t\t0% {\n\t\t\topacity: 1;\n\t\t}\n\n\t\t50% {\n\t\t\topacity: 0;\n\t\t}\n\n\t\t100% {\n\t\t\topacity: 1;\n\t\t}\n\t}\n\n\t.cursor :global(.typing::after) {\n\t\tcontent: 'â–Œ';\n\t\tdisplay: inline-block;\n\t\tcolor: var(--cursor-color);\n\t\tanimation: cursorFade 1.25s infinite;\n\t}\n</style>\n\n<div class:cursor style=\"--cursor-color: {typeof cursor === 'string' ? cursor : 'black'}\" bind:this={node}>\n\t<slot />\n</div>\n"
  ],
  "names": [],
  "mappings": "AA4FC,WAAW,yBAAW,CAAC,AACtB,EAAE,AAAC,CAAC,AACH,OAAO,CAAE,CAAC,AACX,CAAC,AAED,GAAG,AAAC,CAAC,AACJ,OAAO,CAAE,CAAC,AACX,CAAC,AAED,IAAI,AAAC,CAAC,AACL,OAAO,CAAE,CAAC,AACX,CAAC,AACF,CAAC,AAED,sBAAO,CAAC,AAAQ,cAAc,AAAE,CAAC,AAChC,OAAO,CAAE,GAAG,CACZ,OAAO,CAAE,YAAY,CACrB,KAAK,CAAE,IAAI,cAAc,CAAC,CAC1B,SAAS,CAAE,yBAAU,CAAC,KAAK,CAAC,QAAQ,AACrC,CAAC"
}